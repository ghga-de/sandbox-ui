version: '3'

services:

  # rabbit mq message broker
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    hostname: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672


  # sandbox-ui

  sandbox_ui_svc:
    image: ghga/sandbox-ui:dev
    environment:
      SANDBOX_UI_HOST: 0.0.0.0
      SANDBOX_UI_PORT: 8080
      SANDBOX_UI_WELCOME_INFO: This web app is part of an implementation study.\nIt's not intended for production use.
    ports:
      - 8000:8080
    depends_on:
      - sandbox_metadata_svc


  # sandbox-metadata:

  sandbox_metadata_svc:
    image: ghga/sandbox-metadata:dev
    environment:
      SANDBOX_METADATA_HOST: 0.0.0.0
      SANDBOX_METADATA_PORT: 8080
      SANDBOX_METADATA_CORS_ALLOWED_ORIGINS: '["*"]'
      SANDBOX_METADATA_CORS_ALLOW_CREDENTIALS: "true"
      SANDBOX_METADATA_CORS_ALLOWED_METHODS: '["*"]'
      SANDBOX_METADATA_CORS_ALLOWED_HEADERS: '["*"]'
      SANDBOX_METADATA_LOG_LEVEL: debug
      SANDBOX_METADATA_DB_URL: mongodb://sandbox_metadata_db:27017
      SANDBOX_METADATA_DB_NAME: metadata
    entrypoint: ["bash", "-c"]
    command: |
      '''
      # install additional deps as they are needed for the population script;
      cd /service
      pip install ".[all]"

      # delete records in db and initialise counters:
      python3 /service/scripts/delete_all_metadata_records.py \
        --db-url "$${SANDBOX_METADATA_DB_URL}" \
        --db-name "$${SANDBOX_METADATA_DB_NAME}"
      python3 /service/scripts/generate_sequence_for_collections.py \
        --db-url "$${SANDBOX_METADATA_DB_URL}" \
        --db-name "$${SANDBOX_METADATA_DB_NAME}"

      # pre-populate the database via the API:
      # (wait for the API to come up)
      ( sleep 2 && /service/scripts/populate_metadata_store.py --base-url http://localhost:8080 --directory /service/examples ) &

      # run the service:
      metadata-service
      '''
    ports:
      - 8001:8080
    depends_on:
      - sandbox_metadata_db

  sandbox_metadata_db:
    image: mongo:4.4.6
    volumes:
      - sandbox_metadata_db_fs:/data/db
    ports:
      - 27000:27017


  # sandbox-storage:

  sandbox_storage_svc:
    image: ghga/sandbox-storage:dev
    environment:
      SANDBOX_STORAGE_HOST: 0.0.0.0
      SANDBOX_STORAGE_PORT: 8080
      SANDBOX_STORAGE_log_level: debug
      SANDBOX_STORAGE_CORS_ALLOWED_ORIGINS: '["*"]'
      SANDBOX_STORAGE_CORS_ALLOW_CREDENTIALS: "true"
      SANDBOX_STORAGE_CORS_ALLOWED_METHODS: '["*"]'
      SANDBOX_STORAGE_CORS_ALLOWED_HEADERS: '["*"]'
      SANDBOX_STORAGE_DB_PATH: postgresql://admin:admin@sandbox_storage_svc_db/storage
      DB_URL: postgresql://admin:admin@sandbox_storage_svc_db/storage
      SANDBOX_STORAGE_S3_PATH: http://sandbox_storage_svc_s3:4566
      SANDBOX_STORAGE_RABBITMQ_HOST: rabbitmq
      SANDBOX_STORAGE_RABBITMQ_PORT: 5672
      # path as seen by the ui running in the browser:
      SANDBOX_STORAGE_DRS_PATH: drs://localhost:8002/
    entrypoint: ["/bin/bash", "-c"]
    command: |
      '''
      # install additional deps as they are needed for the population script;
      cd /app
      pip install ".[dev,testing]"

      # initialize db (if not already done):
      cd /app/database_migration
      /home/appuser/.local/bin/alembic -c alembic.ini upgrade head

      # cleanup database:
      /app/scripts/cleanup_db.py

      # pre-populate database:
      /app/scripts/populate_db.py

      # run the service:
      sandbox-storage
      '''
    ports:
      - 8002:8080
    depends_on:
      - sandbox_storage_svc_db
      - sandbox_storage_svc_s3
      - rabbitmq

  sandbox_storage_svc_db:
    image: postgres:13-alpine
    volumes:
      - type: volume
        source: sandbox_storage_db_fs
        target: /var/lib/postgresql/data
        volume:
          nocopy: true
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: storage
    command: ['postgres', '-c', 'work_mem=512MB']
    deploy:
      endpoint_mode : dnsrr

  sandbox_storage_svc_s3:
    image: localstack/localstack
    ports:
      - 4500:4566
    environment:
      SERVICES: s3
      DEFAULT_REGION: eu-west-1
      AWS_DEFAULT_REGION: eu-west-1
      HOSTNAME_EXTERNAL: localhost # accessible at localhost
      USE_SSL: "false"
      DATA_DIR: /tmp/localstack/data
      DEBUG: 1
    volumes:
      - type: volume
        source: sandbox_storage_s3_fs
        target: /tmp/localstack
        volume:
          nocopy: true


  # sandbox-request:

  sandbox_request_rest_svc:
    image: ghga/sandbox-request:dev
    environment:
      SANDBOX_REQUEST_HOST: 0.0.0.0
      SANDBOX_REQUEST_PORT: 8080
      SANDBOX_REQUEST_LOG_LEVEL: debug
      SANDBOX_REQUEST_CORS_ALLOWED_ORIGINS: '["*"]'
      SANDBOX_REQUEST_CORS_ALLOW_CREDENTIALS: "true"
      SANDBOX_REQUEST_CORS_ALLOWED_METHODS: '["*"]'
      SANDBOX_REQUEST_CORS_ALLOWED_HEADERS: '["*"]'
      SANDBOX_REQUEST_DB_URL: mongodb://sandbox_request_db:27017
      SANDBOX_REQUEST_DB_NAME: request
      SANDBOX_REQUEST_SVC_METADATA_URL: http://sandbox_metadata_svc:8080
      SANDBOX_REQUEST_RABBITMQ_HOST: rabbitmq
      SANDBOX_REQUEST_RABBITMQ_PORT: 5672
      SANDBOX_REQUEST_DATA_REQUESTER_EMAIL: ghga.notification@gmail.de
      SANDBOX_REQUEST_DATA_REQUESTER_NAME: "Carry Catfish"
      SANDBOX_REQUEST_DATA_STEWARD_EMAIL: ghga.notification@gmail.de
      SANDBOX_REQUEST_DATA_STEWARD_NAME: "Mike Mushroom"
    command: rest-api
    ports:
      - 8003:8080
    depends_on:
      - sandbox_metadata_svc
      - sandbox_request_db
      - sandbox_request_async_svc

  sandbox_request_async_svc:
    image: ghga/sandbox-request:dev
    environment:
      SANDBOX_REQUEST_LOG_LEVEL: debug
      SANDBOX_REQUEST_DB_URL: mongodb://sandbox_request_db:27017
      SANDBOX_REQUEST_DB_NAME: request
      SANDBOX_REQUEST_SVC_METADATA_URL: http://sandbox_metadata_svc:8080
      SANDBOX_REQUEST_RABBITMQ_HOST: rabbitmq
      SANDBOX_REQUEST_RABBITMQ_PORT: 5672
      SANDBOX_REQUEST_DATA_REQUESTER_EMAIL: ghga.notification@gmail.de
      SANDBOX_REQUEST_DATA_REQUESTER_NAME: "Carry Catfish"
      SANDBOX_REQUEST_DATA_STEWARD_EMAIL: ghga.notification@gmail.de
      SANDBOX_REQUEST_DATA_STEWARD_NAME: "Mike Mushroom"
    entrypoint: ["/bin/bash", "-c"]
    command: |
      '''
      # install additional deps as they are needed for the population script;
      cd /service
      pip install ".[all]"

      # pre-populate the database:
      # /service/scripts/populate_db.py \
      #   --db-url "$${SANDBOX_REQUEST_DB_URL}" \
      #   --db-name "$${SANDBOX_REQUEST_DB_NAME}"

      # run the service:
      sandbox-request async-api
      '''
    depends_on:
      - sandbox_metadata_svc
      - sandbox_request_db

  sandbox_request_db:
    image: mongo:4.4.6
    volumes:
      - sandbox_request_db_fs:/data/db
    ports:
      - 27001:27017

volumes:
  sandbox_metadata_db_fs: {}
  sandbox_storage_db_fs: {}
  sandbox_storage_s3_fs: {}
  sandbox_request_db_fs: {}

